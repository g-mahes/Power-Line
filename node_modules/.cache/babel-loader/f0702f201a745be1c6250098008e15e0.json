{"ast":null,"code":"var assign = require('object-assign');\n\nvar polyline = require('@mapbox/polyline');\n\nvar GeoJSONPolyline = module.exports = {\n  // Pick and choose your verbs\n  encode: geo2poly,\n  decode: poly2geo,\n  //\n  geojson: poly2geo,\n  geoJson: poly2geo,\n  geoJSON: poly2geo,\n  //\n  polyline: geo2poly,\n  polyLine: geo2poly,\n  //\n  toEncoded: geo2poly,\n  fromEncoded: poly2geo,\n  //\n  toGeoJSON: poly2geo,\n  fromGeoJSON: geo2poly,\n  //\n  toPolyline: geo2poly,\n  fromPolyline: poly2geo\n};\n/**\n * Encodes a GeoJSON geometry as a polyline.\n *\n * @param {Object} geojson\n * @param {Object} options\n * @returns {Object} encoded geojson\n */\n\nfunction geo2poly(geojson, options) {\n  var precision = typeof options === 'object' && options.precision;\n\n  switch (geojson.type) {\n    // Coordinate arrays\n    case 'Point':\n      {\n        return assign({}, geojson, {\n          coordinates: encode([geojson.coordinates], precision)\n        });\n      }\n\n    case 'MultiPoint':\n    case 'LineString':\n      {\n        return assign({}, geojson, {\n          coordinates: encode(geojson.coordinates, precision)\n        });\n      }\n    // Arrays of coordinates\n\n    case 'MultiLineString':\n    case 'Polygon':\n      {\n        return assign({}, geojson, {\n          coordinates: geojson.coordinates.map(function (coords) {\n            return encode(coords, precision);\n          })\n        });\n      }\n\n    case 'Feature':\n      {\n        return assign({}, geojson, {\n          geometry: geo2poly(geojson.geometry, precision)\n        });\n      }\n\n    case 'FeatureCollection':\n      {\n        return assign({}, geojson, {\n          features: geojson.features.map(function (feature) {\n            return geo2poly(feature, precision);\n          })\n        });\n      }\n\n    case 'GeometryCollection':\n      {\n        return assign({}, geojson, {\n          geometries: geojson.geometries.map(function (geo) {\n            return geo2poly(geo, precision);\n          })\n        });\n      }\n\n    case 'MultiPolygon':\n      {\n        return assign({}, geojson, {\n          coordinates: geojson.coordinates.map(function (polygons) {\n            return polygons.map(function (coords) {\n              return encode(coords, precision);\n            });\n          })\n        });\n      }\n    // Return the original object for unsupported types\n\n    default:\n      return geojson;\n  }\n}\n/**\n * Decode a polyline-encoded GeoJSON geometry.\n *\n * @param {Object} geojson\n * @param {Object} options\n * @returns {Object} decoded geojson\n */\n\n\nfunction poly2geo(geojson, options) {\n  var precision = typeof options === 'object' && options.precision;\n\n  switch (geojson.type) {\n    // Translate a single-element array back to a single coordinate array\n    case 'Point':\n      {\n        return assign({}, geojson, {\n          coordinates: decode(geojson.coordinates, precision)[0]\n        });\n      }\n    // Decode into a coordinate array\n\n    case 'MultiPoint':\n    case 'LineString':\n      {\n        return assign({}, geojson, {\n          coordinates: decode(geojson.coordinates, precision)\n        });\n      }\n    // Arrays of coordinate arrays\n\n    case 'MultiLineString':\n    case 'Polygon':\n      {\n        return assign({}, geojson, {\n          coordinates: geojson.coordinates.map(function (coords) {\n            return decode(coords, precision);\n          })\n        });\n      }\n    // Arrays of polygons\n\n    case 'MultiPolygon':\n      {\n        return assign({}, geojson, {\n          coordinates: geojson.coordinates.map(function (polygons) {\n            return polygons.map(function (coords) {\n              return decode(coords, precision);\n            });\n          })\n        });\n      }\n    // GeoJSON object is\n\n    case 'Feature':\n      {\n        return assign({}, geojson, {\n          geometry: poly2geo(geojson.geometry, precision)\n        });\n      }\n\n    case 'FeatureCollection':\n      {\n        return assign({}, geojson, {\n          features: geojson.features.map(function (feature) {\n            return poly2geo(feature, precision);\n          })\n        });\n      }\n\n    case 'GeometryCollection':\n      {\n        return assign({}, geojson, {\n          geometries: geojson.geometries.map(function (geometry) {\n            return poly2geo(geometry, precision);\n          })\n        });\n      }\n    // Return the original object for unsupported types\n\n    default:\n      return geojson;\n  }\n}\n\nfunction encode(coordinates, precision) {\n  return polyline.encode(flip(coordinates), precision);\n}\n\nfunction decode(str, precision) {\n  return flip(polyline.decode(str, precision));\n}\n\nfunction flip(coords) {\n  var flipped = [];\n\n  for (var i = 0; i < coords.length; i++) {\n    flipped.push(coords[i].slice().reverse());\n  }\n\n  return flipped;\n}\n\nif (typeof addEventListener !== 'undefined') {\n  /* global addEventListener, postMessage */\n  addEventListener('message', function (message) {\n    var method = message.data[0];\n\n    if (method in GeoJSONPolyline) {\n      var geojson = message.data[1];\n      var precision = message.data[2];\n      var converted = GeoJSONPolyline[method](geojson, precision);\n      postMessage(converted);\n    }\n  });\n}","map":{"version":3,"names":["assign","require","polyline","GeoJSONPolyline","module","exports","encode","geo2poly","decode","poly2geo","geojson","geoJson","geoJSON","polyLine","toEncoded","fromEncoded","toGeoJSON","fromGeoJSON","toPolyline","fromPolyline","options","precision","type","coordinates","map","coords","geometry","features","feature","geometries","geo","polygons","flip","str","flipped","i","length","push","slice","reverse","addEventListener","message","method","data","converted","postMessage"],"sources":["C:/Users/gmahe/Desktop/girs challenge/girs/node_modules/geojson-polyline/geojson-polyline.js"],"sourcesContent":["var assign = require('object-assign')\nvar polyline = require('@mapbox/polyline')\n\nvar GeoJSONPolyline = module.exports = {\n  // Pick and choose your verbs\n  encode: geo2poly,\n  decode: poly2geo,\n  //\n  geojson: poly2geo,\n  geoJson: poly2geo,\n  geoJSON: poly2geo,\n  //\n  polyline: geo2poly,\n  polyLine: geo2poly,\n  //\n  toEncoded: geo2poly,\n  fromEncoded: poly2geo,\n  //\n  toGeoJSON: poly2geo,\n  fromGeoJSON: geo2poly,\n  //\n  toPolyline: geo2poly,\n  fromPolyline: poly2geo\n}\n\n/**\n * Encodes a GeoJSON geometry as a polyline.\n *\n * @param {Object} geojson\n * @param {Object} options\n * @returns {Object} encoded geojson\n */\nfunction geo2poly (geojson, options) {\n  var precision = typeof (options) === 'object' && options.precision\n\n  switch (geojson.type) {\n    // Coordinate arrays\n    case 'Point': {\n      return assign({}, geojson, {\n        coordinates: encode([geojson.coordinates], precision)\n      })\n    }\n    case 'MultiPoint':\n    case 'LineString': {\n      return assign({}, geojson, {\n        coordinates: encode(geojson.coordinates, precision)\n      })\n    }\n    // Arrays of coordinates\n    case 'MultiLineString':\n    case 'Polygon': {\n      return assign({}, geojson, {\n        coordinates: geojson.coordinates.map(function (coords) {\n          return encode(coords, precision)\n        })\n      })\n    }\n    case 'Feature': {\n      return assign({}, geojson, {\n        geometry: geo2poly(geojson.geometry, precision)\n      })\n    }\n    case 'FeatureCollection': {\n      return assign({}, geojson, {\n        features: geojson.features.map(function (feature) {\n          return geo2poly(feature, precision)\n        })\n      })\n    }\n    case 'GeometryCollection': {\n      return assign({}, geojson, {\n        geometries: geojson.geometries.map(function (geo) {\n          return geo2poly(geo, precision)\n        })\n      })\n    }\n    case 'MultiPolygon': {\n      return assign({}, geojson, {\n        coordinates: geojson.coordinates.map(function (polygons) {\n          return polygons.map(function (coords) {\n            return encode(coords, precision)\n          })\n        })\n      })\n    }\n    // Return the original object for unsupported types\n    default:\n      return geojson\n  }\n}\n\n/**\n * Decode a polyline-encoded GeoJSON geometry.\n *\n * @param {Object} geojson\n * @param {Object} options\n * @returns {Object} decoded geojson\n */\nfunction poly2geo (geojson, options) {\n  var precision = typeof (options) === 'object' && options.precision\n\n  switch (geojson.type) {\n    // Translate a single-element array back to a single coordinate array\n    case 'Point': {\n      return assign({}, geojson, {\n        coordinates: decode(geojson.coordinates, precision)[0]\n      })\n    }\n    // Decode into a coordinate array\n    case 'MultiPoint':\n    case 'LineString': {\n      return assign({}, geojson, {\n        coordinates: decode(geojson.coordinates, precision)\n      })\n    }\n    // Arrays of coordinate arrays\n    case 'MultiLineString':\n    case 'Polygon': {\n      return assign({}, geojson, {\n        coordinates: geojson.coordinates.map(function (coords) {\n          return decode(coords, precision)\n        })\n      })\n    }\n    // Arrays of polygons\n    case 'MultiPolygon': {\n      return assign({}, geojson, {\n        coordinates: geojson.coordinates.map(function (polygons) {\n          return polygons.map(function (coords) {\n            return decode(coords, precision)\n          })\n        })\n      })\n    }\n    // GeoJSON object is\n    case 'Feature': {\n      return assign({}, geojson, {\n        geometry: poly2geo(geojson.geometry, precision)\n      })\n    }\n    case 'FeatureCollection': {\n      return assign({}, geojson, {\n        features: geojson.features.map(function (feature) {\n          return poly2geo(feature, precision)\n        })\n      })\n    }\n    case 'GeometryCollection': {\n      return assign({}, geojson, {\n        geometries: geojson.geometries.map(function (geometry) {\n          return poly2geo(geometry, precision)\n        })\n      })\n    }\n    // Return the original object for unsupported types\n    default:\n      return geojson\n  }\n}\n\nfunction encode (coordinates, precision) {\n  return polyline.encode(flip(coordinates), precision)\n}\nfunction decode (str, precision) {\n  return flip(polyline.decode(str, precision))\n}\nfunction flip (coords) {\n  var flipped = []\n  for (var i = 0; i < coords.length; i++) {\n    flipped.push(coords[i].slice().reverse())\n  }\n  return flipped\n}\n\nif (typeof addEventListener !== 'undefined') {\n  /* global addEventListener, postMessage */\n  addEventListener('message', function (message) {\n    var method = message.data[0]\n    if (method in GeoJSONPolyline) {\n      var geojson = message.data[1]\n      var precision = message.data[2]\n      var converted = GeoJSONPolyline[method](geojson, precision)\n      postMessage(converted)\n    }\n  })\n}\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CAAtB;;AAEA,IAAIE,eAAe,GAAGC,MAAM,CAACC,OAAP,GAAiB;EACrC;EACAC,MAAM,EAAEC,QAF6B;EAGrCC,MAAM,EAAEC,QAH6B;EAIrC;EACAC,OAAO,EAAED,QAL4B;EAMrCE,OAAO,EAAEF,QAN4B;EAOrCG,OAAO,EAAEH,QAP4B;EAQrC;EACAP,QAAQ,EAAEK,QAT2B;EAUrCM,QAAQ,EAAEN,QAV2B;EAWrC;EACAO,SAAS,EAAEP,QAZ0B;EAarCQ,WAAW,EAAEN,QAbwB;EAcrC;EACAO,SAAS,EAAEP,QAf0B;EAgBrCQ,WAAW,EAAEV,QAhBwB;EAiBrC;EACAW,UAAU,EAAEX,QAlByB;EAmBrCY,YAAY,EAAEV;AAnBuB,CAAvC;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,QAAT,CAAmBG,OAAnB,EAA4BU,OAA5B,EAAqC;EACnC,IAAIC,SAAS,GAAG,OAAQD,OAAR,KAAqB,QAArB,IAAiCA,OAAO,CAACC,SAAzD;;EAEA,QAAQX,OAAO,CAACY,IAAhB;IACE;IACA,KAAK,OAAL;MAAc;QACZ,OAAOtB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBa,WAAW,EAAEjB,MAAM,CAAC,CAACI,OAAO,CAACa,WAAT,CAAD,EAAwBF,SAAxB;QADM,CAAd,CAAb;MAGD;;IACD,KAAK,YAAL;IACA,KAAK,YAAL;MAAmB;QACjB,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBa,WAAW,EAAEjB,MAAM,CAACI,OAAO,CAACa,WAAT,EAAsBF,SAAtB;QADM,CAAd,CAAb;MAGD;IACD;;IACA,KAAK,iBAAL;IACA,KAAK,SAAL;MAAgB;QACd,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBa,WAAW,EAAEb,OAAO,CAACa,WAAR,CAAoBC,GAApB,CAAwB,UAAUC,MAAV,EAAkB;YACrD,OAAOnB,MAAM,CAACmB,MAAD,EAASJ,SAAT,CAAb;UACD,CAFY;QADY,CAAd,CAAb;MAKD;;IACD,KAAK,SAAL;MAAgB;QACd,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBgB,QAAQ,EAAEnB,QAAQ,CAACG,OAAO,CAACgB,QAAT,EAAmBL,SAAnB;QADO,CAAd,CAAb;MAGD;;IACD,KAAK,mBAAL;MAA0B;QACxB,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBiB,QAAQ,EAAEjB,OAAO,CAACiB,QAAR,CAAiBH,GAAjB,CAAqB,UAAUI,OAAV,EAAmB;YAChD,OAAOrB,QAAQ,CAACqB,OAAD,EAAUP,SAAV,CAAf;UACD,CAFS;QADe,CAAd,CAAb;MAKD;;IACD,KAAK,oBAAL;MAA2B;QACzB,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBmB,UAAU,EAAEnB,OAAO,CAACmB,UAAR,CAAmBL,GAAnB,CAAuB,UAAUM,GAAV,EAAe;YAChD,OAAOvB,QAAQ,CAACuB,GAAD,EAAMT,SAAN,CAAf;UACD,CAFW;QADa,CAAd,CAAb;MAKD;;IACD,KAAK,cAAL;MAAqB;QACnB,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBa,WAAW,EAAEb,OAAO,CAACa,WAAR,CAAoBC,GAApB,CAAwB,UAAUO,QAAV,EAAoB;YACvD,OAAOA,QAAQ,CAACP,GAAT,CAAa,UAAUC,MAAV,EAAkB;cACpC,OAAOnB,MAAM,CAACmB,MAAD,EAASJ,SAAT,CAAb;YACD,CAFM,CAAP;UAGD,CAJY;QADY,CAAd,CAAb;MAOD;IACD;;IACA;MACE,OAAOX,OAAP;EApDJ;AAsDD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASD,QAAT,CAAmBC,OAAnB,EAA4BU,OAA5B,EAAqC;EACnC,IAAIC,SAAS,GAAG,OAAQD,OAAR,KAAqB,QAArB,IAAiCA,OAAO,CAACC,SAAzD;;EAEA,QAAQX,OAAO,CAACY,IAAhB;IACE;IACA,KAAK,OAAL;MAAc;QACZ,OAAOtB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBa,WAAW,EAAEf,MAAM,CAACE,OAAO,CAACa,WAAT,EAAsBF,SAAtB,CAAN,CAAuC,CAAvC;QADY,CAAd,CAAb;MAGD;IACD;;IACA,KAAK,YAAL;IACA,KAAK,YAAL;MAAmB;QACjB,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBa,WAAW,EAAEf,MAAM,CAACE,OAAO,CAACa,WAAT,EAAsBF,SAAtB;QADM,CAAd,CAAb;MAGD;IACD;;IACA,KAAK,iBAAL;IACA,KAAK,SAAL;MAAgB;QACd,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBa,WAAW,EAAEb,OAAO,CAACa,WAAR,CAAoBC,GAApB,CAAwB,UAAUC,MAAV,EAAkB;YACrD,OAAOjB,MAAM,CAACiB,MAAD,EAASJ,SAAT,CAAb;UACD,CAFY;QADY,CAAd,CAAb;MAKD;IACD;;IACA,KAAK,cAAL;MAAqB;QACnB,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBa,WAAW,EAAEb,OAAO,CAACa,WAAR,CAAoBC,GAApB,CAAwB,UAAUO,QAAV,EAAoB;YACvD,OAAOA,QAAQ,CAACP,GAAT,CAAa,UAAUC,MAAV,EAAkB;cACpC,OAAOjB,MAAM,CAACiB,MAAD,EAASJ,SAAT,CAAb;YACD,CAFM,CAAP;UAGD,CAJY;QADY,CAAd,CAAb;MAOD;IACD;;IACA,KAAK,SAAL;MAAgB;QACd,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBgB,QAAQ,EAAEjB,QAAQ,CAACC,OAAO,CAACgB,QAAT,EAAmBL,SAAnB;QADO,CAAd,CAAb;MAGD;;IACD,KAAK,mBAAL;MAA0B;QACxB,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBiB,QAAQ,EAAEjB,OAAO,CAACiB,QAAR,CAAiBH,GAAjB,CAAqB,UAAUI,OAAV,EAAmB;YAChD,OAAOnB,QAAQ,CAACmB,OAAD,EAAUP,SAAV,CAAf;UACD,CAFS;QADe,CAAd,CAAb;MAKD;;IACD,KAAK,oBAAL;MAA2B;QACzB,OAAOrB,MAAM,CAAC,EAAD,EAAKU,OAAL,EAAc;UACzBmB,UAAU,EAAEnB,OAAO,CAACmB,UAAR,CAAmBL,GAAnB,CAAuB,UAAUE,QAAV,EAAoB;YACrD,OAAOjB,QAAQ,CAACiB,QAAD,EAAWL,SAAX,CAAf;UACD,CAFW;QADa,CAAd,CAAb;MAKD;IACD;;IACA;MACE,OAAOX,OAAP;EAvDJ;AAyDD;;AAED,SAASJ,MAAT,CAAiBiB,WAAjB,EAA8BF,SAA9B,EAAyC;EACvC,OAAOnB,QAAQ,CAACI,MAAT,CAAgB0B,IAAI,CAACT,WAAD,CAApB,EAAmCF,SAAnC,CAAP;AACD;;AACD,SAASb,MAAT,CAAiByB,GAAjB,EAAsBZ,SAAtB,EAAiC;EAC/B,OAAOW,IAAI,CAAC9B,QAAQ,CAACM,MAAT,CAAgByB,GAAhB,EAAqBZ,SAArB,CAAD,CAAX;AACD;;AACD,SAASW,IAAT,CAAeP,MAAf,EAAuB;EACrB,IAAIS,OAAO,GAAG,EAAd;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,MAAM,CAACW,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;IACtCD,OAAO,CAACG,IAAR,CAAaZ,MAAM,CAACU,CAAD,CAAN,CAAUG,KAAV,GAAkBC,OAAlB,EAAb;EACD;;EACD,OAAOL,OAAP;AACD;;AAED,IAAI,OAAOM,gBAAP,KAA4B,WAAhC,EAA6C;EAC3C;EACAA,gBAAgB,CAAC,SAAD,EAAY,UAAUC,OAAV,EAAmB;IAC7C,IAAIC,MAAM,GAAGD,OAAO,CAACE,IAAR,CAAa,CAAb,CAAb;;IACA,IAAID,MAAM,IAAIvC,eAAd,EAA+B;MAC7B,IAAIO,OAAO,GAAG+B,OAAO,CAACE,IAAR,CAAa,CAAb,CAAd;MACA,IAAItB,SAAS,GAAGoB,OAAO,CAACE,IAAR,CAAa,CAAb,CAAhB;MACA,IAAIC,SAAS,GAAGzC,eAAe,CAACuC,MAAD,CAAf,CAAwBhC,OAAxB,EAAiCW,SAAjC,CAAhB;MACAwB,WAAW,CAACD,SAAD,CAAX;IACD;EACF,CARe,CAAhB;AASD"},"metadata":{},"sourceType":"script"}