{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gmahe\\\\Desktop\\\\girs challenge\\\\girs\\\\src\\\\LineRender.js\";\nimport React from 'react';\nimport { GeoJSON } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst decideColor = risk => {\n  var color = 'red';\n  return color;\n};\n\nexport default function LineRender(props) {\n  const displayGeo = props => {\n    const {\n      lines\n    } = props;\n\n    if (lines.length > 0) {\n      return lines.map((line, index) => {\n        console.log(line);\n        return /*#__PURE__*/_jsxDEV(GeoJSON, {\n          data: line.GeoJSON,\n          pathOptions: {\n            color: decideColor(.5)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this);\n      });\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 16\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: displayGeo(props)\n  }, void 0, false);\n}\n_c = LineRender;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineRender\");","map":{"version":3,"names":["React","GeoJSON","decideColor","risk","color","LineRender","props","displayGeo","lines","length","map","line","index","console","log"],"sources":["C:/Users/gmahe/Desktop/girs challenge/girs/src/LineRender.js"],"sourcesContent":["import React from 'react'\r\nimport { GeoJSON } from 'react-leaflet'\r\nconst decideColor = (risk) => {\r\n    var color = 'red'\r\n    return color\r\n}\r\n\r\nexport default function LineRender (props){\r\nconst displayGeo = (props) => {\r\n    const {lines} = props\r\n    if(lines.length > 0){\r\n        return(\r\n            lines.map((line,index) => {\r\n                console.log(line)\r\n                return(\r\n                    <GeoJSON data={line.GeoJSON} pathOptions= {{ color: decideColor(.5)}}></GeoJSON>\r\n                )\r\n            })\r\n        )\r\n    } else{\r\n        return(<div></div>)\r\n    }\r\n}\r\n    return (\r\n        <> \r\n        {displayGeo(props)}\r\n        </>\r\n    )\r\n}"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,eAAxB;;;;AACA,MAAMC,WAAW,GAAIC,IAAD,IAAU;EAC1B,IAAIC,KAAK,GAAG,KAAZ;EACA,OAAOA,KAAP;AACH,CAHD;;AAKA,eAAe,SAASC,UAAT,CAAqBC,KAArB,EAA2B;EAC1C,MAAMC,UAAU,GAAID,KAAD,IAAW;IAC1B,MAAM;MAACE;IAAD,IAAUF,KAAhB;;IACA,IAAGE,KAAK,CAACC,MAAN,GAAe,CAAlB,EAAoB;MAChB,OACID,KAAK,CAACE,GAAN,CAAU,CAACC,IAAD,EAAMC,KAAN,KAAgB;QACtBC,OAAO,CAACC,GAAR,CAAYH,IAAZ;QACA,oBACI,QAAC,OAAD;UAAS,IAAI,EAAEA,IAAI,CAACV,OAApB;UAA6B,WAAW,EAAG;YAAEG,KAAK,EAAEF,WAAW,CAAC,EAAD;UAApB;QAA3C;UAAA;UAAA;UAAA;QAAA,QADJ;MAGH,CALD,CADJ;IAQH,CATD,MASM;MACF,oBAAO;QAAA;QAAA;QAAA;MAAA,QAAP;IACH;EACJ,CAdD;;EAeI,oBACI;IAAA,UACCK,UAAU,CAACD,KAAD;EADX,iBADJ;AAKH;KArBuBD,U"},"metadata":{},"sourceType":"module"}